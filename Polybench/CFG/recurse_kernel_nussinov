Workspace recurse deleted.
setenv PIPS_CPP_FLAGS "-I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/utilities -I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/medley/nussinov -DPOLYBENCH_TIME"
setproperty ABORT_ON_USER_ERROR TRUE
setproperty PREPROCESSOR_MISSING_FILE_HANDLING "generate"
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER TRUE
Registering file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/medley/nussinov/nussinov.c
Checking C syntax of file "/home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/medley/nussinov/nussinov.c"
Preprocessing file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/medley/nussinov/nussinov.c
Splitting file    ./recurse.database/Tmp/nussinov.cpp_processed.c
  Module         main
  Module         kernel_nussinov
  Module         nussinov!print_array
  Module         nussinov!init_array
  Module         nussinov!
Workspace recurse created and opened.
Main module PROGRAM "main" selected.
Module main selected
Request: build phase/rule GEN_MULTI_RECURSE_EXPLORER for module kernel_nussinov.
  BOOTSTRAP                      building   ENTITIES()
  COMPILATION_UNIT_PARSER        building   DECLARATIONS(nussinov!)
  C_PARSER                       building   PARSED_CODE(kernel_nussinov)
                                 building   CALLEES(kernel_nussinov)
  CONTROLIZER                    building   CODE(kernel_nussinov)
  GEN_MULTI_RECURSE_EXPLORER     updating   CODE(kernel_nussinov)
[statement_filter] 	 IN
int i, j, k;

#pragma scop
polybench_timer_start();

for(i = n-1; i >= 0; i += -1)
   for(j = i+1; j <= n-1; j += 1) {
      if (j-1>=0)
         table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
      if (i+1<n)
         table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];

      if (j-1>=0&&i+1<n)
         /* don't allow adjacent elements to bond */
         if (i<j-1)
            table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
         else
            table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];

loop_1:
      for(k = i+1; k <= j-1; k += 1)
         table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
   }
polybench_timer_stop();

polybench_timer_print();
#pragma endscop

[sequence_filter] 	 IN
[statement_filter] 	 IN
int i, j, k;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

#pragma scop
polybench_timer_start();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

for(i = n-1; i >= 0; i += -1)
   for(j = i+1; j <= n-1; j += 1) {
      if (j-1>=0)
         table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
      if (i+1<n)
         table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];

      if (j-1>=0&&i+1<n)
         /* don't allow adjacent elements to bond */
         if (i<j-1)
            table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
         else
            table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];

loop_1:
      for(k = i+1; k <= j-1; k += 1)
         table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
   }
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
for(j = i+1; j <= n-1; j += 1) {
   if (j-1>=0)
      table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
   if (i+1<n)
      table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];

   if (j-1>=0&&i+1<n)
      /* don't allow adjacent elements to bond */
      if (i<j-1)
         table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
      else
         table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];

loop_1:
   for(k = i+1; k <= j-1; k += 1)
      table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
if (j-1>=0)
   table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
if (i+1<n)
   table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];

if (j-1>=0&&i+1<n)
   /* don't allow adjacent elements to bond */
   if (i<j-1)
      table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
   else
      table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];

loop_1:
for(k = i+1; k <= j-1; k += 1)
   table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
[sequence_filter] 	 IN
[statement_filter] 	 IN
if (j-1>=0)
   table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
[test_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
table[i][j] = table[i][j]>=table[i][j-1]?table[i][j]:table[i][j-1];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
[sequence_filter] 	 IN
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[test_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
if (i+1<n)
   table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];
[test_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
table[i][j] = table[i][j]>=table[i+1][j]?table[i][j]:table[i+1][j];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
[sequence_filter] 	 IN
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[test_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

if (j-1>=0&&i+1<n)
   /* don't allow adjacent elements to bond */
   if (i<j-1)
      table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
   else
      table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];
[test_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
/* don't allow adjacent elements to bond */
if (i<j-1)
   table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
else
   table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];
[test_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
table[i][j] = table[i][j]>=table[i+1][j-1]+(seq[i]+seq[j]==3?1:0)?table[i][j]:table[i+1][j-1]+(seq[i]+seq[j]==3?1:0);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
table[i][j] = table[i][j]>=table[i+1][j-1]?table[i][j]:table[i+1][j-1];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[test_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
[sequence_filter] 	 IN
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[test_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

loop_1:
for(k = i+1; k <= j-1; k += 1)
   table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
table[i][j] = table[i][j]>=table[i][k]+table[k+1][j]?table[i][j]:table[i][k]+table[k+1][j];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
polybench_timer_stop();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

polybench_timer_print();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
#pragma endscop

[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
GEN_MULTI_RECURSE_EXPLORER made for kernel_nussinov.
Request: build phase/rule UNSPLIT for module main.
  PRINT_CODE                     building   PRINTED_FILE(kernel_nussinov)
PRINT_CODE[kernel_nussinov] (set_current_module_entity) [internal error] (/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/ri-util/static.c:74) 
assertion failed

 'current module is undefined' not verified
PRINT_CODE[kernel_nussinov] (pips_log_end) [internal error] stopping pips on code -1 (ABORT) at ("/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/misc/message.c":1134) for internal error raised
Aborted (core dumped)
