Workspace recurse deleted.
setenv PIPS_CPP_FLAGS "-I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/utilities -I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/linear-algebra/solvers/durbin -DPOLYBENCH_TIME"
setproperty ABORT_ON_USER_ERROR TRUE
setproperty PREPROCESSOR_MISSING_FILE_HANDLING "generate"
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER TRUE
Registering file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/linear-algebra/solvers/durbin/durbin.c
Checking C syntax of file "/home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/linear-algebra/solvers/durbin/durbin.c"
Preprocessing file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/linear-algebra/solvers/durbin/durbin.c
Splitting file    ./recurse.database/Tmp/durbin.cpp_processed.c
  Module         main
  Module         kernel_durbin
  Module         durbin!print_array
  Module         durbin!init_array
  Module         durbin!
Workspace recurse created and opened.
Main module PROGRAM "main" selected.
Module main selected
Request: build phase/rule GEN_MULTI_RECURSE_EXPLORER for module kernel_durbin.
  BOOTSTRAP                      building   ENTITIES()
  COMPILATION_UNIT_PARSER        building   DECLARATIONS(durbin!)
  C_PARSER                       building   PARSED_CODE(kernel_durbin)
                                 building   CALLEES(kernel_durbin)
  CONTROLIZER                    building   CODE(kernel_durbin)
  GEN_MULTI_RECURSE_EXPLORER     updating   CODE(kernel_durbin)
[statement_filter] 	 IN
double z[2000];
double alpha;
double beta;
double sum;

int i, k;

#pragma scop
y[0] = -r[0];
beta = 1.0;
alpha = -r[0];

polybench_timer_start();

for(k = 1; k <= n-1; k += 1) {
   beta = (1-alpha*alpha)*beta;
   sum = 0.0;
   for(i = 0; i <= k-1; i += 1)
      sum += r[k-i-1]*y[i];
   alpha = -(r[k]+sum)/beta;

   for(i = 0; i <= k-1; i += 1)
      z[i] = y[i]+alpha*y[k-i-1];
loop_1:
   for(i = 0; i <= k-1; i += 1)
      y[i] = z[i];
   y[k] = alpha;
}
polybench_timer_stop();

polybench_timer_print();
#pragma endscop

[sequence_filter] 	 IN
[statement_filter] 	 IN
double z[2000];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double alpha;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double beta;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double sum;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

int i, k;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

#pragma scop
y[0] = -r[0];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
beta = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
alpha = -r[0];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

polybench_timer_start();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

for(k = 1; k <= n-1; k += 1) {
   beta = (1-alpha*alpha)*beta;
   sum = 0.0;
   for(i = 0; i <= k-1; i += 1)
      sum += r[k-i-1]*y[i];
   alpha = -(r[k]+sum)/beta;

   for(i = 0; i <= k-1; i += 1)
      z[i] = y[i]+alpha*y[k-i-1];
loop_1:
   for(i = 0; i <= k-1; i += 1)
      y[i] = z[i];
   y[k] = alpha;
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
beta = (1-alpha*alpha)*beta;
sum = 0.0;
for(i = 0; i <= k-1; i += 1)
   sum += r[k-i-1]*y[i];
alpha = -(r[k]+sum)/beta;

for(i = 0; i <= k-1; i += 1)
   z[i] = y[i]+alpha*y[k-i-1];
loop_1:
for(i = 0; i <= k-1; i += 1)
   y[i] = z[i];
y[k] = alpha;
[sequence_filter] 	 IN
[statement_filter] 	 IN
beta = (1-alpha*alpha)*beta;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
sum = 0.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
for(i = 0; i <= k-1; i += 1)
   sum += r[k-i-1]*y[i];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
sum += r[k-i-1]*y[i];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
alpha = -(r[k]+sum)/beta;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

for(i = 0; i <= k-1; i += 1)
   z[i] = y[i]+alpha*y[k-i-1];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
z[i] = y[i]+alpha*y[k-i-1];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
loop_1:
for(i = 0; i <= k-1; i += 1)
   y[i] = z[i];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
y[i] = z[i];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
y[k] = alpha;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
polybench_timer_stop();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

polybench_timer_print();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
#pragma endscop

[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
GEN_MULTI_RECURSE_EXPLORER made for kernel_durbin.
Request: build phase/rule UNSPLIT for module main.
  CONTROLIZER                    building   CODE(durbin!)
CONTROLIZER[durbin!] (set_current_module_entity) [internal error] (/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/ri-util/static.c:74) 
assertion failed

 'current module is undefined' not verified
CONTROLIZER[durbin!] (pips_log_end) [internal error] stopping pips on code -1 (ABORT) at ("/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/misc/message.c":1134) for internal error raised
Aborted (core dumped)
