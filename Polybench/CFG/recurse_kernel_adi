Workspace recurse deleted.
setenv PIPS_CPP_FLAGS "-I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/utilities -I /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/stencils/adi -DPOLYBENCH_TIME"
setproperty ABORT_ON_USER_ERROR TRUE
setproperty PREPROCESSOR_MISSING_FILE_HANDLING "generate"
setproperty FOR_TO_DO_LOOP_IN_CONTROLIZER TRUE
Registering file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/stencils/adi/adi.c
Checking C syntax of file "/home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/stencils/adi/adi.c"
Preprocessing file /home/maksim/PycharmProjects/unrolling/Polybench/poly_preprocessed/stencils/adi/adi.c
Splitting file    ./recurse.database/Tmp/adi.cpp_processed.c
  Module         main
  Module         kernel_adi
  Module         adi!print_array
  Module         adi!init_array
  Module         adi!
Workspace recurse created and opened.
Main module PROGRAM "main" selected.
Module main selected
Request: build phase/rule GEN_MULTI_RECURSE_EXPLORER for module kernel_adi.
  BOOTSTRAP                      building   ENTITIES()
  COMPILATION_UNIT_PARSER        building   DECLARATIONS(adi!)
  C_PARSER                       building   PARSED_CODE(kernel_adi)
                                 building   CALLEES(kernel_adi)
  CONTROLIZER                    building   CODE(kernel_adi)
  GEN_MULTI_RECURSE_EXPLORER     updating   CODE(kernel_adi)
[statement_filter] 	 IN
int t, i, j;
double DX, DY, DT;
double B1, B2;
double mul1, mul2;
double a, b, c, d, e, f;

#pragma scop
DX = 1.0/((double) n);
DY = 1.0/((double) n);
DT = 1.0/((double) tsteps);
B1 = 2.0;
B2 = 1.0;
mul1 = B1*DT/(DX*DX);
mul2 = B2*DT/(DY*DY);

a = -mul1/2.0;
b = 1.0+mul1;
c = a;
d = -mul2/2.0;
e = 1.0+mul2;
f = d;

polybench_timer_start();

for(t = 1; t <= tsteps; t += 1) {
   //Column Sweep
   for(i = 1; i <= n-1-1; i += 1) {
      v[0][i] = 1.0;
      p[i][0] = 0.0;
      q[i][0] = v[0][i];
      for(j = 1; j <= n-1-1; j += 1) {
         p[i][j] = -c/(a*p[i][j-1]+b);
         q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
      }

      v[n-1][i] = 1.0;
      for(j = n-2; j >= 1; j += -1)
         v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
   }
   //Row Sweep
   for(i = 1; i <= n-1-1; i += 1) {
      u[i][0] = 1.0;
      p[i][0] = 0.0;
      q[i][0] = u[i][0];
      for(j = 1; j <= n-1-1; j += 1) {
         p[i][j] = -f/(d*p[i][j-1]+e);
         q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
      }
      u[i][n-1] = 1.0;
loop_1:
      for(j = n-2; j >= 1; j += -1)
         u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
   }
}
polybench_timer_stop();

polybench_timer_print();
#pragma endscop

[sequence_filter] 	 IN
[statement_filter] 	 IN
int t, i, j;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double DX, DY, DT;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double B1, B2;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double mul1, mul2;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
double a, b, c, d, e, f;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

#pragma scop
DX = 1.0/((double) n);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
DY = 1.0/((double) n);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
DT = 1.0/((double) tsteps);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
B1 = 2.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
B2 = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
mul1 = B1*DT/(DX*DX);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
mul2 = B2*DT/(DY*DY);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

a = -mul1/2.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
b = 1.0+mul1;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
c = a;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
d = -mul2/2.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
e = 1.0+mul2;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
f = d;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

polybench_timer_start();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

for(t = 1; t <= tsteps; t += 1) {
   //Column Sweep
   for(i = 1; i <= n-1-1; i += 1) {
      v[0][i] = 1.0;
      p[i][0] = 0.0;
      q[i][0] = v[0][i];
      for(j = 1; j <= n-1-1; j += 1) {
         p[i][j] = -c/(a*p[i][j-1]+b);
         q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
      }

      v[n-1][i] = 1.0;
      for(j = n-2; j >= 1; j += -1)
         v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
   }
   //Row Sweep
   for(i = 1; i <= n-1-1; i += 1) {
      u[i][0] = 1.0;
      p[i][0] = 0.0;
      q[i][0] = u[i][0];
      for(j = 1; j <= n-1-1; j += 1) {
         p[i][j] = -f/(d*p[i][j-1]+e);
         q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
      }
      u[i][n-1] = 1.0;
loop_1:
      for(j = n-2; j >= 1; j += -1)
         u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
   }
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
//Column Sweep
for(i = 1; i <= n-1-1; i += 1) {
   v[0][i] = 1.0;
   p[i][0] = 0.0;
   q[i][0] = v[0][i];
   for(j = 1; j <= n-1-1; j += 1) {
      p[i][j] = -c/(a*p[i][j-1]+b);
      q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
   }

   v[n-1][i] = 1.0;
   for(j = n-2; j >= 1; j += -1)
      v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
}
//Row Sweep
for(i = 1; i <= n-1-1; i += 1) {
   u[i][0] = 1.0;
   p[i][0] = 0.0;
   q[i][0] = u[i][0];
   for(j = 1; j <= n-1-1; j += 1) {
      p[i][j] = -f/(d*p[i][j-1]+e);
      q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
   }
   u[i][n-1] = 1.0;
loop_1:
   for(j = n-2; j >= 1; j += -1)
      u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
}
[sequence_filter] 	 IN
[statement_filter] 	 IN
//Column Sweep
for(i = 1; i <= n-1-1; i += 1) {
   v[0][i] = 1.0;
   p[i][0] = 0.0;
   q[i][0] = v[0][i];
   for(j = 1; j <= n-1-1; j += 1) {
      p[i][j] = -c/(a*p[i][j-1]+b);
      q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
   }

   v[n-1][i] = 1.0;
   for(j = n-2; j >= 1; j += -1)
      v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
v[0][i] = 1.0;
p[i][0] = 0.0;
q[i][0] = v[0][i];
for(j = 1; j <= n-1-1; j += 1) {
   p[i][j] = -c/(a*p[i][j-1]+b);
   q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
}

v[n-1][i] = 1.0;
for(j = n-2; j >= 1; j += -1)
   v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
[sequence_filter] 	 IN
[statement_filter] 	 IN
v[0][i] = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
p[i][0] = 0.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
q[i][0] = v[0][i];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
for(j = 1; j <= n-1-1; j += 1) {
   p[i][j] = -c/(a*p[i][j-1]+b);
   q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
p[i][j] = -c/(a*p[i][j-1]+b);
q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
[sequence_filter] 	 IN
[statement_filter] 	 IN
p[i][j] = -c/(a*p[i][j-1]+b);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
q[i][j] = (-d*u[j][i-1]+(1.0+2.0*d)*u[j][i]-f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

v[n-1][i] = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
for(j = n-2; j >= 1; j += -1)
   v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
v[j][i] = p[i][j]*v[j+1][i]+q[i][j];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
//Row Sweep
for(i = 1; i <= n-1-1; i += 1) {
   u[i][0] = 1.0;
   p[i][0] = 0.0;
   q[i][0] = u[i][0];
   for(j = 1; j <= n-1-1; j += 1) {
      p[i][j] = -f/(d*p[i][j-1]+e);
      q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
   }
   u[i][n-1] = 1.0;
loop_1:
   for(j = n-2; j >= 1; j += -1)
      u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
u[i][0] = 1.0;
p[i][0] = 0.0;
q[i][0] = u[i][0];
for(j = 1; j <= n-1-1; j += 1) {
   p[i][j] = -f/(d*p[i][j-1]+e);
   q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
}
u[i][n-1] = 1.0;
loop_1:
for(j = n-2; j >= 1; j += -1)
   u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
[sequence_filter] 	 IN
[statement_filter] 	 IN
u[i][0] = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
p[i][0] = 0.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
q[i][0] = u[i][0];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
for(j = 1; j <= n-1-1; j += 1) {
   p[i][j] = -f/(d*p[i][j-1]+e);
   q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
}
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
p[i][j] = -f/(d*p[i][j-1]+e);
q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
[sequence_filter] 	 IN
[statement_filter] 	 IN
p[i][j] = -f/(d*p[i][j-1]+e);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
q[i][j] = (-a*v[i-1][j]+(1.0+2.0*a)*v[i][j]-c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
u[i][n-1] = 1.0;
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
loop_1:
for(j = n-2; j >= 1; j += -1)
   u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
[loop_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[call_filter] 	 IN
[statement_filter] 	 IN
u[i][j] = p[i][j]*u[i][j+1]+q[i][j];
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[loop_rewrite] 	 OUT
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
polybench_timer_stop();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN

polybench_timer_print();
[call_filter] 	 IN
[statement_rewrite] 	 OUT
[statement_filter] 	 IN
#pragma endscop

[call_filter] 	 IN
[statement_rewrite] 	 OUT
[sequence_rewrite] 	 OUT
[statement_rewrite] 	 OUT
GEN_MULTI_RECURSE_EXPLORER made for kernel_adi.
Request: build phase/rule UNSPLIT for module main.
  CONTROLIZER                    building   CODE(adi!)
CONTROLIZER[adi!] (set_current_module_entity) [internal error] (/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/ri-util/static.c:74) 
assertion failed

 'current module is undefined' not verified
CONTROLIZER[adi!] (pips_log_end) [internal error] stopping pips on code -1 (ABORT) at ("/home/maksim/Documents/MYPIPS/pips_dev/ml/src/Libs/misc/message.c":1134) for internal error raised
Aborted (core dumped)
